/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Anime ON API
 * OpenAPI spec version: ##VERSION## DEV.
 */
import type {
  CommentReact,
  CreateComment,
  GetReplyCommentsParams,
  ResponseCommentAnime,
  ResponseCommentReact,
  ResponsePaginatedCommentAnimeList,
} from '../model'
import { customInstance } from '../custom-instance'

/**
 * Ellipsis.
 * @summary Ellipsis.
 */
export type createAnimeCommentResponse = {
  data: ResponseCommentAnime
  status: number
}

export const getCreateAnimeCommentUrl = () => {
  return `/comment/`
}

export const createAnimeComment = async (
  createComment: CreateComment,
  options?: RequestInit,
): Promise<createAnimeCommentResponse> => {
  return customInstance<Promise<createAnimeCommentResponse>>(
    getCreateAnimeCommentUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(createComment),
    },
  )
}

/**
 * Ellipsis.
 * @summary Ellipsis.
 */
export type reactionCommentResponse = {
  data: ResponseCommentReact
  status: number
}

export const getReactionCommentUrl = (id: number) => {
  return `/comment/${id}/reaction/`
}

export const reactionComment = async (
  id: number,
  commentReact: CommentReact,
  options?: RequestInit,
): Promise<reactionCommentResponse> => {
  return customInstance<Promise<reactionCommentResponse>>(
    getReactionCommentUrl(id),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(commentReact),
    },
  )
}

/**
 * Ellipsis.
 * @summary Ellipsis.
 */
export type getReplyCommentsResponse = {
  data: ResponsePaginatedCommentAnimeList
  status: number
}

export const getGetReplyCommentsUrl = (
  id: string,
  params?: GetReplyCommentsParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size > 0
    ? `/comment/${id}/reply/?${normalizedParams.toString()}`
    : `/comment/${id}/reply/`
}

export const getReplyComments = async (
  id: string,
  params?: GetReplyCommentsParams,
  options?: RequestInit,
): Promise<getReplyCommentsResponse> => {
  return customInstance<Promise<getReplyCommentsResponse>>(
    getGetReplyCommentsUrl(id, params),
    {
      ...options,
      method: 'GET',
    },
  )
}
