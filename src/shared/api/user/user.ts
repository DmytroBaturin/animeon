/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Anime ON API
 * OpenAPI spec version: ##VERSION## DEV.
 */
import type {
  RequestUserAnime,
  RequestUserAnimeDelete,
  RequestViewedEpisode,
  ResponsePaginatedUserAnimeList,
  User,
  UserAnimeListParams,
} from "../model"
import { customInstance } from "../custom-instance";

/**
 * Ellipsis.
 * @summary Ellipsis
 */
export type userReadResponse = {
  data: User
  status: number
}

export const getUserReadUrl = () => {
  return `/user/`
}

export const userRead = async (
  options?: RequestInit,
): Promise<userReadResponse> => {
  return customInstance<Promise<userReadResponse>>(getUserReadUrl(), {
    ...options,
    method: 'GET',
  })
}

/**
 * Ellipsis.
 * @summary Ellipsis
 */
export type userAnimeListResponse = {
  data: ResponsePaginatedUserAnimeList
  status: number
}

export const getUserAnimeListUrl = (params?: UserAnimeListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size > 0 ? `/user/anime/?${normalizedParams.toString()}` : `/user/anime/`
}

export const userAnimeList = async (
  params?: UserAnimeListParams,
  options?: RequestInit,
): Promise<userAnimeListResponse> => {
  return customInstance<Promise<userAnimeListResponse>>(
    getUserAnimeListUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * Ellipsis.
 * @summary Ellipsis
 */
export type userAddAnimeResponse = {
  data: unknown
  status: number
}

export const getUserAddAnimeUrl = () => {
  return `/user/anime/`
}

export const userAddAnime = async (
  requestUserAnime: RequestUserAnime,
  options?: RequestInit,
): Promise<userAddAnimeResponse> => {
  return customInstance<Promise<userAddAnimeResponse>>(getUserAddAnimeUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestUserAnime),
  })
}

/**
 * Ellipsis.
 * @summary Ellipsis
 */
export type userDeleteAnimeResponse = {
  data: unknown
  status: number
}

export const getUserDeleteAnimeUrl = () => {
  return `/user/anime/`
}

export const userDeleteAnime = async (
  requestUserAnimeDelete: RequestUserAnimeDelete,
  options?: RequestInit,
): Promise<userDeleteAnimeResponse> => {
  return customInstance<Promise<userDeleteAnimeResponse>>(
    getUserDeleteAnimeUrl(),
    {
      ...options,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(requestUserAnimeDelete),
    },
)}
}

/**
 * Ellipsis.
 * @summary Ellipsis
 */
export type userAddViewedEpisodeResponse = {
  data: unknown
  status: number
}

export const getUserAddViewedEpisodeUrl = () => {
  return `/user/episode/viewed/`
}

export const userAddViewedEpisode = async (
  requestViewedEpisode: RequestViewedEpisode,
  options?: RequestInit,
): Promise<userAddViewedEpisodeResponse> => {
  return customInstance<Promise<userAddViewedEpisodeResponse>>(
    getUserAddViewedEpisodeUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(requestViewedEpisode),
    },
)}
