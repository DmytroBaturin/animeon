/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Anime ON API
 * OpenAPI spec version: ##VERSION## DEV
 */
import type {
  RequestUserAnime,
  RequestUserAnimeDelete,
  RequestViewedEpisode,
  ResponsePaginatedUserAnimeList,
  ResponseUserSettings,
  User,
  UserAnimeListParams,
  UserSettingsCreateBody
} from '.././model'
import { customInstance } from '.././custom-instance';

/**
 * Ellipsis
 * @summary Ellipsis
 */
export type userReadResponse = {
  data: User;
  status: number;
}

export const getUserReadUrl = () => {


  return `/user/`
}

export const userRead = async ( options?: RequestInit): Promise<userReadResponse> => {
  
  return customInstance<Promise<userReadResponse>>(getUserReadUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Ellipsis
 * @summary Ellipsis
 */
export type userAnimeListResponse = {
  data: ResponsePaginatedUserAnimeList;
  status: number;
}

export const getUserAnimeListUrl = (params?: UserAnimeListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/user/anime/?${normalizedParams.toString()}` : `/user/anime/`
}

export const userAnimeList = async (params?: UserAnimeListParams, options?: RequestInit): Promise<userAnimeListResponse> => {
  
  return customInstance<Promise<userAnimeListResponse>>(getUserAnimeListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Ellipsis
 * @summary Ellipsis
 */
export type userAddAnimeResponse = {
  data: unknown;
  status: number;
}

export const getUserAddAnimeUrl = () => {


  return `/user/anime/`
}

export const userAddAnime = async (requestUserAnime: RequestUserAnime, options?: RequestInit): Promise<userAddAnimeResponse> => {
  
  return customInstance<Promise<userAddAnimeResponse>>(getUserAddAnimeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestUserAnime,)
  }
);}


/**
 * Ellipsis
 * @summary Ellipsis
 */
export type userDeleteAnimeResponse = {
  data: unknown;
  status: number;
}

export const getUserDeleteAnimeUrl = () => {


  return `/user/anime/`
}

export const userDeleteAnime = async (requestUserAnimeDelete: RequestUserAnimeDelete, options?: RequestInit): Promise<userDeleteAnimeResponse> => {
  
  return customInstance<Promise<userDeleteAnimeResponse>>(getUserDeleteAnimeUrl(),
  {      
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestUserAnimeDelete,)
  }
);}


/**
 * Ellipsis
 * @summary Ellipsis
 */
export type userAddViewedEpisodeResponse = {
  data: unknown;
  status: number;
}

export const getUserAddViewedEpisodeUrl = () => {


  return `/user/episode/viewed/`
}

export const userAddViewedEpisode = async (requestViewedEpisode: RequestViewedEpisode, options?: RequestInit): Promise<userAddViewedEpisodeResponse> => {
  
  return customInstance<Promise<userAddViewedEpisodeResponse>>(getUserAddViewedEpisodeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestViewedEpisode,)
  }
);}


/**
 * Ellipsis
 * @summary Ellipsis
 */
export type userSettingsListResponse = {
  data: ResponseUserSettings;
  status: number;
}

export const getUserSettingsListUrl = () => {


  return `/user/settings/`
}

export const userSettingsList = async ( options?: RequestInit): Promise<userSettingsListResponse> => {
  
  return customInstance<Promise<userSettingsListResponse>>(getUserSettingsListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Ellipsis
 * @summary Ellipsis
 */
export type userSettingsCreateResponse = {
  data: unknown;
  status: number;
}

export const getUserSettingsCreateUrl = () => {


  return `/user/settings/`
}

export const userSettingsCreate = async (userSettingsCreateBody: UserSettingsCreateBody, options?: RequestInit): Promise<userSettingsCreateResponse> => {
    const formData = new FormData();
if(userSettingsCreateBody.avatar !== undefined) {
 formData.append('avatar', userSettingsCreateBody.avatar)
 }
if(userSettingsCreateBody.telegram !== undefined) {
 formData.append('telegram', userSettingsCreateBody.telegram)
 }

  return customInstance<Promise<userSettingsCreateResponse>>(getUserSettingsCreateUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}


